-- module HW3.Test
--        ( hspecTestTree
--        ) where

-- import Data.Maybe (isJust, isNothing)

-- import Test.Tasty (TestTree)
-- import Test.Tasty.Hspec (testSpec)
-- import Test.Hspec (Spec, describe, it, shouldBe)

-- import HW3.Parser (parse)
-- import HW3.Evaluator (eval)
-- import HW3.Pretty ( prettyValue ) 
-- import Text.Megaparsec.Error (errorBundlePretty)
-- import System.Console.Haskeline ( defaultSettings, getInputLine, outputStrLn, runInputT, InputT )
-- import HW3.Base (HiMonad)
-- import HW3.Action (HIO(runHIO), HiPermission (..))
-- import Data.Set (Set)
-- import qualified Data.Set as Set

-- hspecTestTree :: IO TestTree
-- hspecTestTree = testSpec "Parser" spec_Parser

-- permissions :: String -> Set HiPermission
-- permissions perms = do
--         let r = givePermIfContains 'r' AllowRead
--         let w = givePermIfContains 'w' AllowWrite
--         Set.unions [r, w]
--         where
--             givePermIfContains :: Char -> HiPermission -> Set HiPermission
--             givePermIfContains name perm =
--                 if name `elem` perms
--                     then Set.singleton perm
--                     else Set.empty

-- test :: String -> String
-- test input = case parse input of 
--   (Left err) -> errorBundlePretty err
--   (Right expr) -> do
--     result <- runHIO (eval expr) (permissions "rw")
--     case result of 
--      Left err -> show err 
--      Right val -> show $ prettyValue val

-- spec_Parser :: Spec
-- spec_Parser = do
--   describe "task 1" $ do
--     it "add(500, 12)" $
--       test "add(500, 12)" `shouldBe` "512"
--     it "sub(10, 100)" $
--       test "sub(10, 100)" `shouldBe` "-90"
--     it "mul(23, 768) " $
--       test "mul(23, 768) " `shouldBe` "17664"
--     it "div(57, 190)" $
--       test "div(57, 190)" `shouldBe` "0.3"
--     it "div(57)" $
--       test "div(57)" `shouldBe` "HiErrorArityMismatch"
--     it "sub(1, 2, 3)" $
--       test "sub(1, 2, 3)" `shouldBe` "HiErrorArityMismatch"
--     it "div(1, 0)" $
--       test "div(1, 0)" `shouldBe` "HiErrorDivideByZero"
--     it "div(1, sub(5, 5))" $
--       test "div(1, sub(5, 5))" `shouldBe` "HiErrorDivideByZero"
--     it "15(2)" $
--       test "15(2)" `shouldBe` "HiErrorInvalidFunction"
--     it "sub(10, add)" $
--       test "sub(10, add)" `shouldBe` "HiErrorInvalidArgument"
--     it " add ( 500 , 12 ) " $
--       test " add ( 500 , 12 ) " `shouldBe` "512"
--     it " sub( 10,100) " $
--       test " sub( 10,100) " `shouldBe` "-90"
--     it "div( 57)" $
--       test "div( 57)" `shouldBe` "HiErrorArityMismatch"
--     it "sub(1, 2,3) " $
--       test "sub(1, 2,3) " `shouldBe` "HiErrorArityMismatch"
--     it "div ( 1,0)" $
--       test "div ( 1,0)" `shouldBe` "HiErrorDivideByZero"
--     it "div(1 ,   sub(5,5) )" $
--       test "div(1 ,   sub(5,5) )" `shouldBe` "HiErrorDivideByZero"
--     it "15( 2)" $
--       test "15( 2)" `shouldBe` "HiErrorInvalidFunction"
--     it "sub(10  ,add)" $
--       test "sub(10  ,add)" `shouldBe` "HiErrorInvalidArgument"
--     it "(add(1,2))" $ 
--       test "(add(1,2))" `shouldBe` "3"
--     it "   ( add ( 1 ,  2 )  ) " $ 
--       test "(add(1,2))" `shouldBe` "3"

--   describe "task 2" $ do
--     it "not(true)" $
--       test "not(true)" `shouldBe` "false"
--     it "not(false)" $
--       test "not(false)" `shouldBe` "true"
--     it "and(true, false)" $
--       test "and(true, false)" `shouldBe` "false"
--     it "or(true, false)" $
--       test "or(true, false)" `shouldBe` "true"
--     it "equals(10, 10)" $
--       test "equals(10, 10)" `shouldBe` "true"
--     it "equals(false, false)" $
--       test "equals(false, false)" `shouldBe` "true"
--     it "equals(3, 10)" $
--       test "equals(3, 10)" `shouldBe` "false"
--     it "equals(1, true)" $
--       test "equals(1, true)" `shouldBe` "false"
--     it "less-than(3, 10)" $
--       test "less-than(3, 10)" `shouldBe` "true"
--     it "less-than(1, -1)" $
--       test "less-than(1, -1)" `shouldBe` "false"
--     it "less-than(false, true)" $
--       test "less-than(false, true)" `shouldBe` "true"
--     it "less-than(false, 0)" $
--       test "less-than(false, 0)" `shouldBe` "true"
--     it "not-less-than(10, 10)" $
--       test "not-less-than(10, 10)" `shouldBe` "true"
--     it "equals(add(2, 2), 4)" $
--       test "equals(add(2, 2), 4)" `shouldBe` "true"
--     it "less-than(mul(999, 99), 10000)" $
--       test "less-than(mul(999, 99), 10000)" `shouldBe` "false"
--     it "if(greater-than(div(2, 5), div(3, 7)), 1, -1)" $
--       test "if(greater-than(div(2, 5), div(3, 7)), 1, -1)" `shouldBe` "-1"
--     it "and(less-than(0, 1), less-than(1, 0))" $
--       test "and(less-than(0, 1), less-than(1, 0))" `shouldBe` "false"
--     it "if(true, add, mul)" $
--       test "if(true, add, mul)" `shouldBe` "add"
--     it "if(true, add, mul)(10, 10)" $
--       test "if(true, add, mul)(10, 10)" `shouldBe` "20"
--     it "if(false, add, mul)(10, 10))" $
--       test "if(false, add, mul)(10, 10)" `shouldBe` "100"
--     it "equals(add, add)" $
--       test "equals(add, add)" `shouldBe` "true"
--     it "equals(add, mul)" $
--       test "equals(add, mul)" `shouldBe` "false"

--   describe "task 3" $ do 
--     it "2 + 2" $
--       test "2 + 2" `shouldBe` "4" 
--     it " 2 + 2 * 3" $
--       test "2 + 2 * 3" `shouldBe` "8" 
--     it " (2 + 2) * 3" $
--       test "(2 + 2) * 3" `shouldBe` "12" 
--     it "2 + 2 * 3 == (2 + 2) * 3" $
--       test "2 + 2 * 3 == (2 + 2) * 3" `shouldBe` "false" 
--     it "1 / 2 " $
--       test "1 / 2 " `shouldBe` "0.5" 
--     it "1 /= 2 " $
--       test "1 /= 2 " `shouldBe` "true" 
--     it " 10 == 2*5 && 143 == 11*13" $
--       test " 10 == 2*5 && 143 == 11*13" `shouldBe` "true"

--   describe "task 4" $ do 
--     it "length(\"Hello World\")" $
--       test "length(\"Hello World\")" `shouldBe` "11"
--     it "to-lower(\"Hello World\")" $
--       test "to-lower(\"Hello World\")" `shouldBe` "\"hello world\""
--     it "to-upper(\"Hello World\")" $
--       test "to-upper(\"Hello World\")" `shouldBe` "\"HELLO WORLD\""
--     it "reverse(\"stressed\")" $
--       test "reverse(\"stressed\")" `shouldBe` "\"desserts\""
--     it "trim(\" Hello World \")" $
--       test "trim(\" Hello World \")" `shouldBe` "\"Hello World\""

--     it "\"Hello\" + \"World\"" $
--       test "\"Hello\" + \"World\"" `shouldBe` "\"HelloWorld\""
--     it "\"Cat\" * 5" $
--       test "\"Cat\" * 5" `shouldBe` "\"CatCatCatCatCat\""
--     it "\"/home/user\" / \"hi\"" $
--       test "\"/home/user\" / \"hi\"" `shouldBe` "\"/home/user/hi\""
--     it "\"Hello World\"(0)" $
--       test "\"Hello World\"(0)" `shouldBe` "\"H\""
--     it "\"Hello World\"(7)" $
--       test "\"Hello World\"(7)" `shouldBe` "\"o\""
--     it "\"Hello World\"(-1)" $
--       test "\"Hello World\"(-1)" `shouldBe` "null"
--     it "\"Hello World\"(90)" $
--       test "\"Hello World\"(90)" `shouldBe` "null"
--     it "\"Hello World\"(0, 5)" $
--       test "\"Hello World\"(0, 5)" `shouldBe` "\"Hello\""
--     it "\"Hello World\"(2, 4)" $
--       test "\"Hello World\"(2, 4)" `shouldBe` "\"ll\""
--     it "to-upper(\"what a nice language\")(7, 11)" $
--       test "to-upper(\"what a nice language\")(7, 11)" `shouldBe` "\"NICE\""
--     it "\"Hello\" == \"World\"" $
--       test "\"Hello\" == \"World\"" `shouldBe` "false"
--     it "length(\"Hello\" + \"World\")" $
--       test "length(\"Hello\" + \"World\")" `shouldBe` "10"
--     it "length(\"hehe\" * 5) / 3" $
--       test "length(\"hehe\" * 5) / 3" `shouldBe` "6 + 2/3"

--   describe "task 5" $ do 
--     it "[1, 2, 3]" $ 
--       test "[1, 2, 3]" `shouldBe` "[ 1, 2, 3 ]"
--     it "[1, 2, 3 * 10]" $ 
--       test "[1, 2, 3 * 10]" `shouldBe` "[ 1, 2, 30 ]"
--     it "list(1, 2, 3)" $ 
--       test "list(1, 2, 3)" `shouldBe` "[ 1, 2, 3 ]"
--     it "range(5, 10.3) " $ 
--       test "range(5, 10.3) " `shouldBe` "[ 5, 6, 7, 8, 9, 10 ]"
--     it "fold(add, [11, 22, 33])" $ 
--       test "fold(add, [11, 22, 33])" `shouldBe` "66"
--     it "fold(mul, [11, 22, 33])" $ 
--       test "fold(mul, [11, 22, 33])" `shouldBe` "7986"
--     it "fold(div, [11, 22, 33])" $ 
--       test "fold(div, [11, 22, 33])" `shouldBe` "1/66"
--     it "length([1, true, \"Hello\"])" $ 
--       test "length([1, true, \"Hello\"])" `shouldBe` "3"
--     it "reverse([1, true, \"Hello\"])" $ 
--       test "reverse([1, true, \"Hello\"])" `shouldBe` "[ \"Hello\", true, 1 ]"
--     it "[1, 2] + [3, 4, 5]" $ 
--       test "[1, 2] + [3, 4, 5]" `shouldBe` "[ 1, 2, 3, 4, 5 ]"
--     it "[0, \"x\"] * 3" $ 
--       test "[0, \"x\"] * 3" `shouldBe` "[ 0, \"x\", 0, \"x\", 0, \"x\" ]"
--     it "[\"hello\", true, \"world\"](1)" $ 
--       test "[\"hello\", true, \"world\"](1)" `shouldBe` "true"
--     it "[\"hello\", true, \"world\"](1, 3)" $ 
--       test "[\"hello\", true, \"world\"](1, 3)" `shouldBe` "[ true, \"world\" ]"
--     it "fold(add, [2, 5] * 3)" $ 
--       test "fold(add, [2, 5] * 3)" `shouldBe` "21"
--     it "fold(mul, range(1, 10))" $ 
--       test "fold(mul, range(1, 10))" `shouldBe` "3628800"
--     it "[0, true, false, \"hello\", \"world\"](2, 4)" $ 
--       test "[0, true, false, \"hello\", \"world\"](2, 4)" `shouldBe` "[ false, \"hello\" ]"
--     it "reverse(range(0.5, 70/8))" $ 
--       test "reverse(range(0.5, 70/8))" `shouldBe` "[ 8.5, 7.5, 6.5, 5.5, 4.5, 3.5, 2.5, 1.5, 0.5 ]"

--   describe "task 6" $ do 
--     it "[# c3 28 #]" $ 
--       test "[# c3 28 #]" `shouldBe` "[# c3 28 #]"
--     it "pack-bytes([ 3, 255, 158, 32 ])" $ 
--       test "pack-bytes([ 3, 255, 158, 32 ])" `shouldBe` "[# 03 ff 9e 20 #]"
--     it "unpack-bytes([# 10 20 30 #])" $ 
--       test "unpack-bytes([# 10 20 30 #])" `shouldBe` "[ 16, 32, 48 ]"
--     it "encode-utf8(\"Hello!\") " $ 
--       test "encode-utf8(\"Hello!\") " `shouldBe` "[# 48 65 6c 6c 6f 21 #]"
--     it "decode-utf8([# 48 65 6c 6c 6f #])" $ 
--       test "decode-utf8([# 48 65 6c 6c 6f #])" `shouldBe` "\"Hello\""
--     it "decode-utf8([# c3 28 #])" $ 
--       test "decode-utf8([# c3 28 #])" `shouldBe` "null"
--     it "pack-bytes(range(30, 40))" $ 
--       test "pack-bytes(range(30, 40))" `shouldBe` "[# 1e 1f 20 21 22 23 24 25 26 27 28 #]"
--     it "zip(encode-utf8(\"Hello, World!\" * 1000))" $ 
--       test "zip(encode-utf8(\"Hello, World!\" * 1000))" `shouldBe` "[# 78 da ed c7 31 0d 00 20 0c 00 30 2b f0 23 64 0e 30 00 df 92 25 f3 7f a0 82 af fd 1a 37 b3 d6 d8 d5 79 66 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 fc c9 03 ca 0f 3b 28 #]"
--     it "decode-utf8([# 68 69 #] * 5)" $ 
--       test "decode-utf8([# 68 69 #] * 5)" `shouldBe` "\"hihihihihi\""
--     it "unzip([# 78 da 63 64 62 06 00 00 0d 00 07 #])" $ 
--       test "unzip([# 78 da 63 64 62 06 00 00 0d 00 07 #])" `shouldBe` "[# 01 02 03 #]"
--     it "zip([# 01 02 03 #])" $ 
--       test "zip([# 01 02 03 #])" `shouldBe` "[# 78 da 63 64 62 06 00 00 0d 00 07 #]"
--     it "deserialise(serialise([# 01 02 03 #]))" $ 
--       test "deserialise(serialise([# 01 02 03 #]))" `shouldBe` "[# 01 02 03 #]"
--     it "deserialise(serialise(fold(add, [11, 22, 33])))" $ 
--       test "deserialise(serialise(fold(add, [11, 22, 33])))" `shouldBe` "66"
--     it "deserialise(serialise(add))" $ 
--       test "deserialise(serialise(add))" `shouldBe` "add"
--     it "[# 00 ff 01 e3 #](1)" $ 
--       test "[# 00 ff 01 e3 #](1)" `shouldBe` "255"
--     it "[# 00 ff 01 e3 #](1,3)" $ 
--       test "[# 00 ff 01 e3 #](1,3)" `shouldBe` "[# ff 01 #]"
--     -- it "" $ 
--     --   test "" `shouldBe` ""
--     -- it "" $ 
--     --   test "" `shouldBe` ""
      
 

    